facet_grid(~PCLASS, labeller=label_both) +
labs(title='Titanic') +
labs(x="SEX", y=paste("FARE")) +
layer(data=df,
mapping=aes(x=SEX, y=as.numeric(as.character(FARE))),
stat="boxplot",
stat_params=list(),
geom="boxplot",
geom_params=list(color="black", fill="orange"),
position=position_dodge()
)
require(extrafont)
ggplot() +
coord_cartesian() +
scale_x_discrete() +
scale_y_continuous() +
facet_grid(~PCLASS, labeller=label_both) +
labs(title='Titanic') +
labs(x="SEX", y=paste("FARE")) +
layer(data=df,
mapping=aes(x=SEX, y=as.numeric(as.character(FARE))),
stat="boxplot",
stat_params=list(),
geom="boxplot",
geom_params=list(color="black", fill="orange"),
position=position_dodge()
)+
layer(data=df,
mapping=aes(x=SEX, y=as.numeric(as.character(FARE))),
stat="identity",
stat_params=list(),
geom="point",
geom_params=list(),
position=position_jitter(width=0.3, height=0)
)
require(extrafont)
ggplot() +
coord_cartesian() +
scale_x_discrete() +
scale_y_continuous() +
facet_grid(~PCLASS, labeller=label_both) +
labs(title='Titanic') +
labs(x="SEX", y=paste("FARE")) +
layer(data=df,
mapping=aes(x=SEX, y=as.numeric(as.character(FARE))),
stat="boxplot",
stat_params=list(),
geom="boxplot",
geom_params=list(color="black", fill="orange", alpha = 0.7),
position=position_dodge()
)
require(extrafont)
ggplot() +
coord_cartesian() +
scale_x_discrete() +
scale_y_continuous() +
facet_grid(~PCLASS, labeller=label_both) +
labs(title='Titanic') +
labs(x="SEX", y=paste("FARE")) +
layer(data=df,
mapping=aes(x=SEX, y=as.numeric(as.character(FARE))),
stat="boxplot",
stat_params=list(),
geom="boxplot",
geom_params=list(color="black", fill="orange", alpha = 0.5),
position=position_dodge()
)
df <- data.frame(fromJSON(getURL(URLencode('129.152.144.84:5001/rest/native/?query="select * from Titanic where pclass is not null"'),httpheader=c(DB='jdbc:oracle:thin:@129.152.144.84:1521/PDBF15DV.usuniversi01134.oraclecloud.internal', USER='cs329e_mmc2762', PASS='orcl_mmc2762', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE), ))
source('~/DataVisualization/DV_PRoject1/01 Data/Dataframe6.R', echo=TRUE)
source('~/DataVisualization/DV_PRoject1/01 Data/Dataframe6.R', echo=TRUE)
df <- data.frame(fromJSON(getURL(URLencode('129.152.144.84:5001/rest/native/?query="select * from Titanic where pclass is not null"'),httpheader=c(DB='jdbc:oracle:thin:@129.152.144.84:1521/PDBF15DV.usuniversi01134.oraclecloud.internal', USER='cs329e_mmc2762', PASS='orcl_mmc2762', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE), ))
df
summary(df)
head(df)
require(extrafont)
ggplot() +
coord_cartesian() +
scale_x_discrete() +
scale_y_continuous() +
facet_grid(~PCLASS, labeller=label_both) +
labs(title='Titanic') +
labs(x="SEX", y=paste("FARE")) +
layer(data=df,
mapping=aes(x=SEX, y=as.numeric(as.character(FARE))),
stat="boxplot",
stat_params=list(),
geom="boxplot",
geom_params=list(color="orange", fill="orange"),
require(extrafont)
ggplot() +
coord_cartesian() +
scale_x_discrete() +
scale_y_continuous() +
facet_grid(~PCLASS, labeller=label_both) +
labs(title='Titanic') +
labs(x="SEX", y=paste("FARE")) +
layer(data=df,
mapping=aes(x=SEX, y=as.numeric(as.character(FARE))),
stat="boxplot",
stat_params=list(),
geom="boxplot",
geom_params=list(color="cyan", fill="cyan"),
position=position_dodge()
)
df <- data.frame(fromJSON(getURL(URLencode('129.152.144.84:5001/rest/native/?query="select * from titanic where sex is not null"'),httpheader=c(DB='jdbc:oracle:thin:@129.152.144.84:1521/PDBF15DV.usuniversi01134.oraclecloud.internal', USER='cs329e_mmc2762', PASS='orcl_mmc2762', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE), ))
require(extrafont)
ggplot() +
coord_cartesian() +
scale_x_discrete() +
scale_y_continuous() +
facet_grid(~PCLASS, labeller=label_both) +
labs(title='Titanic') +
labs(x="SEX", y=paste("FARE")) +
layer(data=df,
mapping=aes(x=SEX, y=as.numeric(as.character(FARE))),
stat="boxplot",
stat_params=list(),
geom="boxplot",
geom_params=list(color="black", fill="cyan"),
position=position_dodge()
)
setwd("~/DataVisualization/DV_RProject3/01 Data")
setwd("~/DataVisualization/DV_RProject3/01 Data")
file_path <- "Unemployment.csv"
df <- read.csv(file_path, stringsAsFactors = FALSE)
# Replace "." (i.e., period) with "_" in the column names.
names(df) <- gsub("\\.+", "_", names(df))
str(df) # Uncomment this and  run just the lines to here to get column types to use for getting the list of measures.
summary(df)
measures <- c("Civilian_labor_force_2006 Employed_2006", "Unemployed_2006", "Civilian_labor_force_2007",  "Employed_2007", "Unemployed_2007", "Civilian_labor_force_2008", "Employed_2008", "Unemployed_2008",  "Civilian_labor_force_2009", "Employed_2009", "Unemployed_2009", "Civilian_labor_force_2010", "Employed_2010", "Unemployed_2010", "Civilian_labor_force_2011", "Employed_2011", "Unemployed_2011", "Civilian_labor_force_2012", "Employed_2012", "Unemployed_2012", "Civilian_labor_force_2013", "Employed_2013", "Unemployed_2013", "Unemployment_rate_2013", "Civilian_labor_force_2014", "Employed_2014", "Unemployed_2014", "Median_Household_Income_2013")
names(df)
#measures <- NA # Do this if there are no measures.
# Get rid of special characters in each column.
# Google ASCII Table to understand the following:
for(n in names(df)) {
df[n] <- data.frame(lapply(df[n], gsub, pattern="[^ -~]",replacement= ""))
}
dimensions <- setdiff(names(df), measures)
if( length(measures) > 1 || ! is.na(dimensions)) {
for(d in dimensions) {
# Get rid of " and ' in dimensions.
df[d] <- data.frame(lapply(df[d], gsub, pattern="[\"']",replacement= ""))
# Change & to and in dimensions.
df[d] <- data.frame(lapply(df[d], gsub, pattern="&",replacement= " and "))
# Change : to ; in dimensions.
df[d] <- data.frame(lapply(df[d], gsub, pattern=":",replacement= ";"))
}
}
library(lubridate)
# Fix date columns, this needs to be done by hand because | needs to be correct.
#                                                        \_/
df$Order_Date <- gsub(" [0-9]+:.*", "", gsub(" UTC", "", mdy(as.character(df$Order_Date), tz="UTC")))
df$Ship_Date  <- gsub(" [0-9]+:.*", "", gsub(" UTC", "", mdy(as.character(df$Ship_Date),  tz="UTC")))
if( length(measures) > 1 || ! is.na(measures)) {
for(m in measures) {
df[m] <- data.frame(lapply(df[m], gsub, pattern="[^--.0-9]",replacement= ""))
}
}
setwd("~/DataVisualization/DV_RProject3/01 Data")
file_path <- "UnemploymentTest.csv"
df <- read.csv(file_path, stringsAsFactors = FALSE)
# Replace "." (i.e., period) with "_" in the column names.
names(df) <- gsub("\\.+", "_", names(df))
str(df) # Uncomment this and  run just the lines to here to get column types to use for getting the list of measures.
summary(df)
measures <- c("Civilian_labor_force_2006 Employed_2006", "Unemployed_2006", "Civilian_labor_force_2007",  "Employed_2007", "Unemployed_2007", "Civilian_labor_force_2008", "Employed_2008", "Unemployed_2008",  "Civilian_labor_force_2009", "Employed_2009", "Unemployed_2009", "Civilian_labor_force_2010", "Employed_2010", "Unemployed_2010", "Civilian_labor_force_2011", "Employed_2011", "Unemployed_2011", "Civilian_labor_force_2012", "Employed_2012", "Unemployed_2012", "Civilian_labor_force_2013", "Employed_2013", "Unemployed_2013", "Unemployment_rate_2013", "Civilian_labor_force_2014", "Employed_2014", "Unemployed_2014", "Median_Household_Income_2013")
names(df)
#measures <- NA # Do this if there are no measures.
# Get rid of special characters in each column.
# Google ASCII Table to understand the following:
for(n in names(df)) {
df[n] <- data.frame(lapply(df[n], gsub, pattern="[^ -~]",replacement= ""))
}
dimensions <- setdiff(names(df), measures)
if( length(measures) > 1 || ! is.na(dimensions)) {
for(d in dimensions) {
# Get rid of " and ' in dimensions.
df[d] <- data.frame(lapply(df[d], gsub, pattern="[\"']",replacement= ""))
# Change & to and in dimensions.
df[d] <- data.frame(lapply(df[d], gsub, pattern="&",replacement= " and "))
# Change : to ; in dimensions.
df[d] <- data.frame(lapply(df[d], gsub, pattern=":",replacement= ";"))
}
}
library(lubridate)
# Fix date columns, this needs to be done by hand because | needs to be correct.
#                                                        \_/
#df$Order_Date <- gsub(" [0-9]+:.*", "", gsub(" UTC", "", mdy(as.character(df$Order_Date), tz="UTC")))
#df$Ship_Date  <- gsub(" [0-9]+:.*", "", gsub(" UTC", "", mdy(as.character(df$Ship_Date),  tz="UTC")))
# The following is an example of dealing with special cases like making state abbreviations be all upper case.
# df["State"] <- data.frame(lapply(df["State"], toupper))
# Get rid of all characters in measures except for numbers, the - sign, and period.dimensions
if( length(measures) > 1 || ! is.na(measures)) {
for(m in measures) {
df[m] <- data.frame(lapply(df[m], gsub, pattern="[^--.0-9]",replacement= ""))
}
}
setwd("~/DataVisualization/DV_RProject3/01 Data")
file_path <- "UnemploymentTest.csv"
df <- read.csv(file_path, stringsAsFactors = FALSE)
# Replace "." (i.e., period) with "_" in the column names.
names(df) <- gsub("\\.+", "_", names(df))
str(df) # Uncomment this and  run just the lines to here to get column types to use for getting the list of measures.
summary(df)
measures <- c("Civilian_labor_force_2006 Employed_2006", "Unemployed_2006", "Civilian_labor_force_2007",  "Employed_2007", "Unemployed_2007", "Civilian_labor_force_2008", "Employed_2008", "Unemployed_2008",  "Civilian_labor_force_2009", "Employed_2009", "Unemployed_2009", "Civilian_labor_force_2010", "Employed_2010", "Unemployed_2010", "Civilian_labor_force_2011", "Employed_2011", "Unemployed_2011", "Civilian_labor_force_2012", "Employed_2012", "Unemployed_2012", "Civilian_labor_force_2013", "Employed_2013", "Unemployed_2013", "Unemployment_rate_2013", "Civilian_labor_force_2014", "Employed_2014", "Unemployed_2014", "Median_Household_Income_2013")
names(df)
#measures <- NA # Do this if there are no measures.
# Get rid of special characters in each column.
# Google ASCII Table to understand the following:
for(n in names(df)) {
df[n] <- data.frame(lapply(df[n], gsub, pattern="[^ -~]",replacement= ""))
}
dimensions <- setdiff(names(df), measures)
if( length(measures) > 1 || ! is.na(dimensions)) {
for(d in dimensions) {
# Get rid of " and ' in dimensions.
df[d] <- data.frame(lapply(df[d], gsub, pattern="[\"']",replacement= ""))
# Change & to and in dimensions.
df[d] <- data.frame(lapply(df[d], gsub, pattern="&",replacement= " and "))
# Change : to ; in dimensions.
df[d] <- data.frame(lapply(df[d], gsub, pattern=":",replacement= ";"))
}
}
library(lubridate)
# Fix date columns, this needs to be done by hand because | needs to be correct.
#                                                        \_/
#df$Order_Date <- gsub(" [0-9]+:.*", "", gsub(" UTC", "", mdy(as.character(df$Order_Date), tz="UTC")))
#df$Ship_Date  <- gsub(" [0-9]+:.*", "", gsub(" UTC", "", mdy(as.character(df$Ship_Date),  tz="UTC")))
# The following is an example of dealing with special cases like making state abbreviations be all upper case.
# df["State"] <- data.frame(lapply(df["State"], toupper))
# Get rid of all characters in measures except for numbers, the - sign, and period.dimensions
if( length(measures) > 1 || ! is.na(measures)) {
for(m in measures) {
df[m] <- data.frame(lapply(df[m], gsub, pattern="[^--.0-9]",replacement= ""))
}
}
file_path <- "UnemploymentTest.csv"
df <- read.csv(file_path, stringsAsFactors = FALSE)
# Replace "." (i.e., period) with "_" in the column names.
names(df) <- gsub("\\.+", "_", names(df))
str(df) # Uncomment this and  run just the lines to here to get column types to use for getting the list of measures.
summary(df)
measures <- c("Civilian_labor_force_2006 Employed_2006", "Unemployed_2006", "Civilian_labor_force_2007",  "Employed_2007", "Unemployed_2007", "Civilian_labor_force_2008", "Employed_2008", "Unemployed_2008",  "Civilian_labor_force_2009", "Employed_2009", "Unemployed_2009", "Civilian_labor_force_2010", "Employed_2010", "Unemployed_2010", "Civilian_labor_force_2011", "Employed_2011", "Unemployed_2011", "Civilian_labor_force_2012", "Employed_2012", "Unemployed_2012", "Civilian_labor_force_2013", "Employed_2013", "Unemployed_2013", "Unemployment_rate_2013", "Civilian_labor_force_2014", "Employed_2014", "Unemployed_2014", "Median_Household_Income_2013")
names(df)
#measures <- NA # Do this if there are no measures.
# Get rid of special characters in each column.
# Google ASCII Table to understand the following:
for(n in names(df)) {
df[n] <- data.frame(lapply(df[n], gsub, pattern="[^ -~]",replacement= ""))
}
dimensions <- setdiff(names(df), measures)
if( length(measures) > 1 || ! is.na(dimensions)) {
for(d in dimensions) {
# Get rid of " and ' in dimensions.
df[d] <- data.frame(lapply(df[d], gsub, pattern="[\"']",replacement= ""))
# Change & to and in dimensions.
df[d] <- data.frame(lapply(df[d], gsub, pattern="&",replacement= " and "))
# Change : to ; in dimensions.
df[d] <- data.frame(lapply(df[d], gsub, pattern=":",replacement= ";"))
}
}
library(lubridate)
# Fix date columns, this needs to be done by hand because | needs to be correct.
#                                                        \_/
#df$Order_Date <- gsub(" [0-9]+:.*", "", gsub(" UTC", "", mdy(as.character(df$Order_Date), tz="UTC")))
#df$Ship_Date  <- gsub(" [0-9]+:.*", "", gsub(" UTC", "", mdy(as.character(df$Ship_Date),  tz="UTC")))
# The following is an example of dealing with special cases like making state abbreviations be all upper case.
# df["State"] <- data.frame(lapply(df["State"], toupper))
# Get rid of all characters in measures except for numbers, the - sign, and period.dimensions
if( length(measures) > 1 || ! is.na(measures)) {
for(m in measures) {
df[m] <- data.frame(lapply(df[m], gsub, pattern="[^--.0-9]",replacement= ""))
}
}
setwd("~/DataVisualization/DV_RProject3/01 Data")
file_path <- "Unemployment.csv"
df <- read.csv(file_path, stringsAsFactors = FALSE)
file_path <- "Unemployment.csv"
df <- read.csv(file_path, stringsAsFactors = FALSE)
# Replace "." (i.e., period) with "_" in the column names.
names(df) <- gsub("\\.+", "_", names(df))
str(df) # Uncomment this and  run just the lines to here to get column types to use for getting the list of measures.
summary(df)
measures <- c("Civilian_labor_force_2006 Employed_2006", "Unemployed_2006", "Civilian_labor_force_2007",  "Employed_2007", "Unemployed_2007", "Civilian_labor_force_2008", "Employed_2008", "Unemployed_2008",  "Civilian_labor_force_2009", "Employed_2009", "Unemployed_2009", "Civilian_labor_force_2010", "Employed_2010", "Unemployed_2010", "Civilian_labor_force_2011", "Employed_2011", "Unemployed_2011", "Civilian_labor_force_2012", "Employed_2012", "Unemployed_2012", "Civilian_labor_force_2013", "Employed_2013", "Unemployed_2013", "Unemployment_rate_2013", "Civilian_labor_force_2014", "Employed_2014", "Unemployed_2014", "Median_Household_Income_2013")
names(df)
#measures <- NA # Do this if there are no measures.
# Get rid of special characters in each column.
# Google ASCII Table to understand the following:
for(n in names(df)) {
df[n] <- data.frame(lapply(df[n], gsub, pattern="[^ -~]",replacement= ""))
}
dimensions <- setdiff(names(df), measures)
if( length(measures) > 1 || ! is.na(dimensions)) {
for(d in dimensions) {
# Get rid of " and ' in dimensions.
df[d] <- data.frame(lapply(df[d], gsub, pattern="[\"']",replacement= ""))
# Change & to and in dimensions.
df[d] <- data.frame(lapply(df[d], gsub, pattern="&",replacement= " and "))
# Change : to ; in dimensions.
df[d] <- data.frame(lapply(df[d], gsub, pattern=":",replacement= ";"))
}
}
library(lubridate)
# Fix date columns, this needs to be done by hand because | needs to be correct.
#                                                        \_/
#df$Order_Date <- gsub(" [0-9]+:.*", "", gsub(" UTC", "", mdy(as.character(df$Order_Date), tz="UTC")))
#df$Ship_Date  <- gsub(" [0-9]+:.*", "", gsub(" UTC", "", mdy(as.character(df$Ship_Date),  tz="UTC")))
# The following is an example of dealing with special cases like making state abbreviations be all upper case.
# df["State"] <- data.frame(lapply(df["State"], toupper))
# Get rid of all characters in measures except for numbers, the - sign, and period.dimensions
if( length(measures) > 1 || ! is.na(measures)) {
for(m in measures) {
df[m] <- data.frame(lapply(df[m], gsub, pattern="[^--.0-9]",replacement= ""))
}
}
source('~/DataVisualization/DV_RProject3/00 Doc/Unemployment_ETL.R', echo=TRUE)
setwd("~/DataVisualization/DV_RProject3/01 Data")
file_path <- "Unemployment.csv"
df <- read.csv(file_path, stringsAsFactors = FALSE)
# Replace "." (i.e., period) with "_" in the column names.
names(df) <- gsub("\\.+", "_", names(df))
str(df) # Uncomment this and  run just the lines to here to get column types to use for getting the list of measures.
summary(df)
measures <- c("Civilian_labor_force_2006", "Employed_2006", "Unemployed_2006", "Civilian_labor_force_2007",  "Employed_2007", "Unemployed_2007", "Civilian_labor_force_2008", "Employed_2008", "Unemployed_2008",  "Civilian_labor_force_2009", "Employed_2009", "Unemployed_2009", "Civilian_labor_force_2010", "Employed_2010", "Unemployed_2010", "Civilian_labor_force_2011", "Employed_2011", "Unemployed_2011", "Civilian_labor_force_2012", "Employed_2012", "Unemployed_2012", "Civilian_labor_force_2013", "Employed_2013", "Unemployed_2013", "Unemployment_rate_2013", "Civilian_labor_force_2014", "Employed_2014", "Unemployed_2014", "Median_Household_Income_2013")
names(df)
#measures <- NA # Do this if there are no measures.
# Get rid of special characters in each column.
# Google ASCII Table to understand the following:
for(n in names(df)) {
df[n] <- data.frame(lapply(df[n], gsub, pattern="[^ -~]",replacement= ""))
}
dimensions <- setdiff(names(df), measures)
if( length(measures) > 1 || ! is.na(dimensions)) {
for(d in dimensions) {
# Get rid of " and ' in dimensions.
df[d] <- data.frame(lapply(df[d], gsub, pattern="[\"']",replacement= ""))
# Change & to and in dimensions.
# Change : to ; in dimensions.
df[d] <- data.frame(lapply(df[d], gsub, pattern="&",replacement= " and "))
df[d] <- data.frame(lapply(df[d], gsub, pattern=":",replacement= ";"))
}
}
library(lubridate)
# Fix date columns, this needs to be done by hand because | needs to be correct.
#                                                        \_/
#df$Order_Date <- gsub(" [0-9]+:.*", "", gsub(" UTC", "", mdy(as.character(df$Order_Date), tz="UTC")))
#df$Ship_Date  <- gsub(" [0-9]+:.*", "", gsub(" UTC", "", mdy(as.character(df$Ship_Date),  tz="UTC")))
# The following is an example of dealing with special cases like making state abbreviations be all upper case.
# df["State"] <- data.frame(lapply(df["State"], toupper))
# Get rid of all characters in measures except for numbers, the - sign, and period.dimensions
if( length(measures) > 1 || ! is.na(measures)) {
for(m in measures) {
df[m] <- data.frame(lapply(df[m], gsub, pattern="[^--.0-9]",replacement= ""))
}
}
write.csv(df, paste(gsub(".csv", "", file_path), ".reformatted.csv", sep=""), row.names=FALSE, na = "")
tableName <- gsub(" +", "_", gsub("[^A-z, 0-9, ]", "", gsub(".csv", "", file_path)))
sql <- paste("CREATE TABLE", tableName, "(\n-- Change table_name to the table name you want.\n")
if( length(measures) > 1 || ! is.na(dimensions)) {
for(d in dimensions) {
sql <- paste(sql, paste(d, "varchar2(4000),\n"))
}
}
if( length(measures) > 1 || ! is.na(measures)) {
for(m in measures) {
if(m != tail(measures, n=1)) sql <- paste(sql, paste(m, "number(38,4),\n"))
else sql <- paste(sql, paste(m, "number(38,4)\n"))
}
}
sql <- paste(sql, ");")
cat(sql)
setwd("~/DataVisualization/DV_RProject3/01 Data")
file_path <- "Unemployment.csv"
df <- read.csv(file_path, stringsAsFactors = FALSE)
# Replace "." (i.e., period) with "_" in the column names.
names(df) <- gsub("\\.+", "_", names(df))
str(df) # Uncomment this and  run just the lines to here to get column types to use for getting the list of measures.
summary(df)
measures <- c("Civilian_labor_force_2006", "Employed_2006", "Unemployed_2006", "Civilian_labor_force_2007",  "Employed_2007", "Unemployed_2007", "Civilian_labor_force_2008", "Employed_2008", "Unemployed_2008",  "Civilian_labor_force_2009", "Employed_2009", "Unemployed_2009", "Civilian_labor_force_2010", "Employed_2010", "Unemployed_2010", "Civilian_labor_force_2011", "Employed_2011", "Unemployed_2011", "Civilian_labor_force_2012", "Employed_2012", "Unemployed_2012", "Civilian_labor_force_2013", "Employed_2013", "Unemployed_2013", "Unemployment_rate_2013", "Civilian_labor_force_2014", "Employed_2014", "Unemployed_2014", "Median_Household_Income_2013")
names(df)
#measures <- NA # Do this if there are no measures.
# Google ASCII Table to understand the following:
# Get rid of special characters in each column.
for(n in names(df)) {
df[n] <- data.frame(lapply(df[n], gsub, pattern="[^ -~]",replacement= ""))
}
dimensions <- setdiff(names(df), measures)
for(d in dimensions) {
# Get rid of " and ' in dimensions.
if( length(measures) > 1 || ! is.na(dimensions)) {
df[d] <- data.frame(lapply(df[d], gsub, pattern="[\"']",replacement= ""))
# Change & to and in dimensions.
df[d] <- data.frame(lapply(df[d], gsub, pattern="&",replacement= " and "))
# Change : to ; in dimensions.
df[d] <- data.frame(lapply(df[d], gsub, pattern=":",replacement= ";"))
library(lubridate)
}
# Fix date columns, this needs to be done by hand because | needs to be correct.
}
df$Order_Date <- gsub(" [0-9]+:.*", "", gsub(" UTC", "", mdy(as.character(df$Order_Date), tz="UTC")))
df$Ship_Date  <- gsub(" [0-9]+:.*", "", gsub(" UTC", "", mdy(as.character(df$Ship_Date),  tz="UTC")))
# The following is an example of dealing with special cases like making state abbreviations be all upper case.
# df["State"] <- data.frame(lapply(df["State"], toupper))
# Get rid of all characters in measures except for numbers, the - sign, and period.dimensions
if( length(measures) > 1 || ! is.na(measures)) {
for(m in measures) {
df[m] <- data.frame(lapply(df[m], gsub, pattern="[^--.0-9]",replacement= ""))
}
}
write.csv(df, paste(gsub(".csv", "", file_path), ".reformatted.csv", sep=""), row.names=FALSE, na = "")
tableName <- gsub(" +", "_", gsub("[^A-z, 0-9, ]", "", gsub(".csv", "", file_path)))
sql <- paste("CREATE TABLE", tableName, "(\n-- Change table_name to the table name you want.\n")
if( length(measures) > 1 || ! is.na(dimensions)) {
for(d in dimensions) {
sql <- paste(sql, paste(d, "varchar2(4000),\n"))
}
source('~/DataVisualization/DV_RProject3/00 Doc/Unemployment_ETL.R', echo=TRUE)
}
if( length(measures) > 1 || ! is.na(measures)) {
if(m != tail(measures, n=1)) sql <- paste(sql, paste(m, "number(38,4),\n"))
for(m in measures) {
else sql <- paste(sql, paste(m, "number(38,4)\n"))
}
}
sql <- paste(sql, ");")
cat(sql)
setwd("~/DataVisualization/DV_RProject3/01 Data")
source('~/DataVisualization/DV_RProject3/00 Doc/Unemployment_ETL.R', echo=TRUE)
source('~/DataVisualization/DV_RProject3/00 Doc/Unemployment_ETL.R', echo=TRUE)
source('~/DataVisualization/DV_RProject3/00 Doc/Unemployment_ETL.R', echo=TRUE)
require("jsonlite")
require("RCurl")
require("dplyr")
require("ggplot2")
# Change the USER and PASS below to be your UTEid
edu <- data.frame(fromJSON(getURL(URLencode('129.152.144.84:5001/rest/native/?query="select * from EDUCATION"'),httpheader=c(DB='jdbc:oracle:thin:@129.152.144.84:1521/PDBF15DV.usuniversi01134.oraclecloud.internal', USER='cs329e_pjo293', PASS='orcl_pjo293', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE), ))
emp <- data.frame(fromJSON(getURL(URLencode('129.152.144.84:5001/rest/native/?query="select * from UNEMPLOYMENT"'),httpheader=c(DB='jdbc:oracle:thin:@129.152.144.84:1521/PDBF15DV.usuniversi01134.oraclecloud.internal', USER='cs329e_pjo293', PASS='orcl_pjo293', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE), ))
summary(edu)
summary(emp)
head(edu)
head(emp)
View(edu)
View(emp)
require("jsonlite")
require("RCurl")
require("dplyr")
require("ggplot2")
# Change the USER and PASS below to be your UTEid
edu <- data.frame(fromJSON(getURL(URLencode('129.152.144.84:5001/rest/native/?query="select * from EDUCATION"'),httpheader=c(DB='jdbc:oracle:thin:@129.152.144.84:1521/PDBF15DV.usuniversi01134.oraclecloud.internal', USER='cs329e_pjo293', PASS='orcl_pjo293', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE), ))
emp <- data.frame(fromJSON(getURL(URLencode('129.152.144.84:5001/rest/native/?query="select * from UNEMPLOYMENT"'),httpheader=c(DB='jdbc:oracle:thin:@129.152.144.84:1521/PDBF15DV.usuniversi01134.oraclecloud.internal', USER='cs329e_pjo293', PASS='orcl_pjo293', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE), ))
summary(edu)
summary(emp)
head(edu)
head(emp)
dplyr::inner_join(edu, emp, by="FIPS_CODE") %>% View
dplyr::outer_join(edu, emp, by="FIPS_CODE") %>% View
dplyr::inner_join(edu, emp, by="FIPS_CODE") %>% View
dplyr::full_join(edu, emp, by="FIPS_CODE") %>% View
dplyr::semi_join(emp, emp, by = "AREA_NAME") %>%
dplyr::semi_join(emp, emp, by = "AREA_NAME") %>% View
dplyr::semi_join(edu, emp, by = "AREA_NAME") %>% View
dplyr::left_join(edu, emp, by = "AREA_NAME") %>% View
dplyr::left_join(emp, edu, by = "AREA_NAME") %>% View
dplyr::left_join(emp, edu, by = "FIPS_CODE") %>% View
dplyr::left_join(edu, emp, by = "FIPS_CODE") %>% View
View(edu)
dplyr::inner_join(edu, emp, by="AREA_NAME") %>% View
dplyr::full_join(edu, emp, by="STATE") %>% View
dplyr::inner_join(edu, emp, by="AREA_NAME") %>% View
dplyr::full_join(edu, emp, by="FIPS_CODE") %>% View
require("jsonlite")
require("RCurl")
require("dplyr")
require("ggplot2")
# Change the USER and PASS below to be your UTEid
edu <- data.frame(fromJSON(getURL(URLencode('129.152.144.84:5001/rest/native/?query="select * from EDUCATION"'),httpheader=c(DB='jdbc:oracle:thin:@129.152.144.84:1521/PDBF15DV.usuniversi01134.oraclecloud.internal', USER='cs329e_pjo293', PASS='orcl_pjo293', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE), ))
emp <- data.frame(fromJSON(getURL(URLencode('129.152.144.84:5001/rest/native/?query="select * from UNEMPLOYMENT"'),httpheader=c(DB='jdbc:oracle:thin:@129.152.144.84:1521/PDBF15DV.usuniversi01134.oraclecloud.internal', USER='cs329e_pjo293', PASS='orcl_pjo293', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE), ))
dplyr::full_join(edu, emp, by="FIPS_CODE") %>% View
dplyr::full_join(edu, emp, by="FIPS_CODE") %>% View
dplyr::full_join(edu, emp, by="FIPS_CODE") %>% group_by(URBAN_INFLUENCE_CODE2013) %>%  ggplot(aes(x=URBAN_INFLUENCE_CODE2013 , y=MEDIAN_INCOME_2013)) + geom_boxplot()
dplyr::full_join(edu, emp, by="FIPS_CODE") %>%  ggplot(aes(x=URBAN_INFLUENCE_CODE2013 , y=MEDIAN_INCOME_2013)) + geom_boxplot()
dplyr::full_join(edu, emp, by="FIPS_CODE") %>%  ggplot(aes(x=URBAN_INFLUENCE_CODE2013 , y=MEDIAN_INCOME_2013)) + geom_point()
dplyr::full_join(edu, emp, by="FIPS_CODE") %>%  View()
dplyr::full_join(edu, emp, by="FIPS_CODE") %>% group_by(AREA_NAME.x, AREA_NAME.y) %>% summarise(mean_salary = mean(MEDIAN_INCOME_2013)) %>% ggplot(aes(x=URBAN_INFLUENCE_CODE2013, y=mean_salary)) + geom_point()
dplyr::full_join(edu, emp, by="FIPS_CODE") %>% group_by(AREA_NAME.x, AREA_NAME.y) %>% summarise(mean_salary = mean(MEDIAN_INCOME_2013)) %>% ggplot(aes(x= URBAN_INFLUENCE_CODE2013 , y=mean_salary)) + geom_point()
dplyr::full_join(edu, emp, by="FIPS_CODE") %>% ggplot(aes(x= URBAN_INFLUENCE_CODE2013 , y=as.numeric(as.character(MEDIAN_INCOME_2013)))) + geom_point()
dplyr::full_join(edu, emp, by="FIPS_CODE") %>% summarise(mean_income = mean(MEDIAN_INCOME_2013)) %>% ggplot(aes(x= URBAN_INFLUENCE_CODE2013 , y=as.numeric(as.character(mean_income)))) + geom_point()
dplyr::full_join(edu, emp, by="FIPS_CODE") %>% summarise(mean_income = mean(MEDIAN_INCOME_2013)) %>% ggplot(aes(x= URBAN_INFLUENCE_CODE2013 , y=mean_income)) + geom_point()
edu <- data.frame(fromJSON(getURL(URLencode('129.152.144.84:5001/rest/native/?query="select * from EDUCATION"'),httpheader=c(DB='jdbc:oracle:thin:@129.152.144.84:1521/PDBF15DV.usuniversi01134.oraclecloud.internal', USER='cs329e_pjo293', PASS='orcl_pjo293', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE), ))
emp <- data.frame(fromJSON(getURL(URLencode('129.152.144.84:5001/rest/native/?query="select * from UNEMPLOYMENT"'),httpheader=c(DB='jdbc:oracle:thin:@129.152.144.84:1521/PDBF15DV.usuniversi01134.oraclecloud.internal', USER='cs329e_pjo293', PASS='orcl_pjo293', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE), ))
dplyr::full_join(edu, emp, by="FIPS_CODE") %>% summarise(mean_income = mean(MEDIAN_INCOME_2013)) %>% ggplot(aes(x= URBAN_INFLUENCE_CODE2013 , y=mean_income)) + geom_point()
dplyr::full_join(edu, emp, by="FIPS_CODE") %>% summarise(mean_income = mean(MEDIAN_INCOME_2013)) %>% ggplot(aes(x=URBAN_INFLUENCE_CODE2013, y=mean_income)) + geom_point()
dplyr::full_join(edu, emp, by="FIPS_CODE") %>% ggplot(aes(x=URBAN_INFLUENCE_CODE2013, y=MEDIAN_INCOME_2013)) + geom_point()
dplyr::full_join(edu, emp, by="FIPS_CODE") %>% ggplot(aes(x= URBAN_INFLUENCE_CODE2013 , y=as.numeric(as.character(MEDIAN_INCOME_2013)))) + geom_point()
dplyr::full_join(edu, emp, by="FIPS_CODE") %>% ggplot(aes(x= URBAN_INFLUENCE_CODE2013 , y=as.numeric(as.character(MEDIAN_INCOME_2013)))) + geom_boxplot()
dplyr::full_join(edu, emp, by="FIPS_CODE") %>% arrange(URBAN_INFLUENCE_CODE2013) %>% ggplot(aes(x= URBAN_INFLUENCE_CODE2013 , y=as.numeric(as.character(MEDIAN_INCOME_2013)))) + geom_boxplot()
dplyr::full_join(edu, emp, by="FIPS_CODE")  %>% ggplot(aes(x= arrange(URBAN_INFLUENCE_CODE2013) , y=as.numeric(as.character(MEDIAN_INCOME_2013)))) + geom_boxplot()
dplyr::full_join(edu, emp, by="FIPS_CODE")  %>% ggplot(aes(x= URBAN_INFLUENCE_CODE2013 , y=as.numeric(as.character(MEDIAN_INCOME_2013)))) + geom_boxplot()
dplyr::full_join(edu, emp, by="FIPS_CODE")  %>% x1 = factor(URBAN_INFLUENCE_CODE2013, levels = c("1","2","3","4","5","6","7","8","9","10","11","12","null","NA"))%>% ggplot(aes(x= x1 , y=as.numeric(as.character(MEDIAN_INCOME_2013)))) + geom_boxplot()
dplyr::full_join(edu, emp, by="FIPS_CODE")  %>% x1 = factor(x, levels = c("1","2","3","4","5","6","7","8","9","10","11","12","null","NA"))%>% ggplot(aes(x= x1 , y=as.numeric(as.character(MEDIAN_INCOME_2013)))) + geom_boxplot()
dplyr::full_join(edu, emp, by="FIPS_CODE") %>% ggplot(aes(x= URBAN_INFLUENCE_CODE2013 , y=as.numeric(as.character(MEDIAN_INCOME_2013)))) + geom_boxplot()
dplyr::full_join(edu, emp, by="FIPS_CODE") %>% ggplot(aes(x= RURAL_INFLUENCE_CODE2013 , y=as.numeric(as.character(MEDIAN_INCOME_2013)))) + geom_boxplot()
dplyr::full_join(edu, emp, by="FIPS_CODE") %>% ggplot(aes(x= RURAL_INFLUENCE_CODE2013 , y=as.numeric(as.character(MEDIAN_INCOME_2013)))) + geom_boxplot()
dplyr::full_join(edu, emp, by="FIPS_CODE") %>% ggplot(aes(x= URBAN_INFLUENCE_CODE2013 , y=as.numeric(as.character(MEDIAN_INCOME_2013)))) + geom_boxplot()
dplyr::full_join(edu, emp, by="FIPS_CODE") %>% filter(URBAN_INFLUENCE_CODE2013 %in% c("1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12")) %>% ggplot(aes(x= URBAN_INFLUENCE_CODE2013 , y=as.numeric(as.character(MEDIAN_INCOME_2013)))) + geom_boxplot()
dplyr::full_join(edu, emp, by="FIPS_CODE") %>% filter(URBAN_INFLUENCE_CODE2013 %in% c("1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12")) %>% ggplot(aes(x= URBAN_INFLUENCE_CODE2013 , y=as.numeric(as.character(MEDIAN_INCOME_2013)), color=URBAN_INFLUENCE_CODE2013)) + geom_boxplot()
dplyr::full_join(edu, emp, by="FIPS_CODE") %>% filter(URBAN_INFLUENCE_CODE2013 %in% c("1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12")) %>% ggplot(aes(x= URBAN_INFLUENCE_CODE2013 , y=as.numeric(as.character(MEDIAN_INCOME_2013)), color=AREA_NAME)) + geom_boxplot()
dplyr::full_join(edu, emp, by="FIPS_CODE") %>% filter(URBAN_INFLUENCE_CODE2013 %in% c("1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12")) %>% ggplot(aes(x= URBAN_INFLUENCE_CODE2013 , y=as.numeric(as.character(MEDIAN_INCOME_2013)), color=URBAN_INFLUENCE_CODE2013)) + geom_boxplot()
dplyr::full_join(edu, emp, by="FIPS_CODE") %>% group_by(URBAN_INFLUENCE_CODE2013) %>% filter(URBAN_INFLUENCE_CODE2013 %in% c("1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12")) %>% ggplot(aes(x= BACHELORS2009_13 , y=as.numeric(as.character(MEDIAN_INCOME_2013)), color=URBAN_INFLUENCE_CODE2013)) + geom_boxplot()
dplyr::full_join(edu, emp, by="FIPS_CODE") %>% group_by(URBAN_INFLUENCE_CODE2013) %>% filter(URBAN_INFLUENCE_CODE2013 %in% c("1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12")) %>% ggplot(aes(x= BACHELORS2009_13 , y=as.numeric(as.character(MEDIAN_INCOME_2013)), color=URBAN_INFLUENCE_CODE2013)) + geom_point()
dplyr::full_join(edu, emp, by="FIPS_CODE") %>% group_by(URBAN_INFLUENCE_CODE2013) %>% filter(URBAN_INFLUENCE_CODE2013 %in% c("1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12")) %>% ggplot(aes(x= URBAN_INFLUENCE_CODE2013 , y=as.numeric(as.character(MEDIAN_INCOME_2013)), color=URBAN_INFLUENCE_CODE2013)) + geom_point()
dplyr::full_join(edu, emp, by="FIPS_CODE") %>% group_by(URBAN_INFLUENCE_CODE2013) %>% filter(URBAN_INFLUENCE_CODE2013 %in% c("1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12")) %>% ggplot(aes(x= URBAN_INFLUENCE_CODE2013 , y=as.numeric(as.character(MEDIAN_INCOME_2013)), color=URBAN_INFLUENCE_CODE2013)) + geom_boxplot()
